//*****************************************************************************
// Author:      Chayton
// Date:        04/2015
// ProgramName: OgreSwamp
// Description: A map that solves a maze that can be inputted by the user or
//      a map can randomly be generated by the program.
//*****************************************************************************
package com.github.chaytonscott.OgreSwamp;

import java.util.Scanner;

public class OgreSwamp {
    Map map   = new Map();
    Ogre ogre = new Ogre();
    Sinkhole sinkholes = new Sinkhole();
    Coordinate goldPosition;

    final int OGRE_SIZE = 4;
    final int MAX_DIMENSIONS = 10;


    public static void main(String [] args) {
        OgreSwamp controller = new OgreSwamp();
        controller.startSystem();
    }

    public void startSystem() {
        System.out.printf("Welcome to Ogre Swamp, please enter a map. (Type random to randomly generate a map)\n");
        String input[] = getInput();
        generateMap(input);
        getOgrePosition();
        getSinkholePositions();
        getGoldPosition();


        System.out.print("OGRE POSITIONS:\t");
        for (int i = 0; i < 4; i++) {
            System.out.printf("%s ", ogre.get_position(i).toString());
        }

        System.out.print("\nSINKHOLE POSITIONS:\t");
        for (int i = 0; i < sinkholes.amountOfSinkholes(); i++) {
            System.out.printf("%s ", sinkholes.get_position(i).toString());
        }

        System.out.print("\nGOLD POSITION:\t" + goldPosition.toString());

        System.out.print("\n\nInteger Map for easier viewing...\n");
        printMap();
        findSolution();

    }

    public String[] getInput() {
        Scanner in = new Scanner(System.in);
        String input[] = new String[MAX_DIMENSIONS];
        for (int i = 0; i < 10; i++) {
            input[i] = in.nextLine();
        }

        while(!validInput(input)) {
            System.out.print("Invalid input, please try again...\n");
            for (int i = 0; i < MAX_DIMENSIONS; i++) {
                input[i] = in.nextLine();
            }
        }
        return input;
    }

    public boolean validInput(String input[]) {
        if (input[0].equalsIgnoreCase("random")) {
            return true;
        }

        for (int i = 0; i < MAX_DIMENSIONS; i++) {
            if (input[i].charAt(i) == '@' || input[i].charAt(i) == '.' || input[i].charAt(i) == '$' || input[i].charAt(i) == 'O') {
            } else {
                return false;
            }
        }
        return true;
    }

    public void generateMap(String[] input) {
        int tempMap[][] = new int[MAX_DIMENSIONS][MAX_DIMENSIONS];
        for (int line = 0; line < MAX_DIMENSIONS; line++) {
            for (int column = 0; column < MAX_DIMENSIONS; column++) {
                if (input[line].charAt(column) == '.') {
                    tempMap[line][column] = 0;
                } else if (input[line].charAt(column) == 'O') {
                    tempMap[line][column] = 3;
                } else if (input[line].charAt(column) == '$') {
                    tempMap[line][column] = 6;
                } else if (input[line].charAt(column) == '@') {
                    tempMap[line][column] = 9;
                }
            }
        }
        map = new Map(tempMap);
    }

    public void getOgrePosition() {
        int map[][] = this.map.getMap();
        int coordinateLoop = 0;
        for (int line = 0; line < MAX_DIMENSIONS; line++) {
            for (int column = 0; column < MAX_DIMENSIONS; column++) {
                if (map[line][column] == 9) {
                    Coordinate ogrePosition = new Coordinate(line, column);
                    ogre.setPositions(ogrePosition, coordinateLoop++);
                }
            }
        }
    }

    public void getSinkholePositions() {
        int map[][] = this.map.getMap();
        for (int line = 0; line < MAX_DIMENSIONS; line++) {
            for (int column = 0; column < MAX_DIMENSIONS; column++) {
                if (map[line][column] == 3) {
                    Coordinate sinkholePosition = new Coordinate(line, column);
                    sinkholes.setPositions(sinkholePosition);
                }
            }
        }
    }

    public void getGoldPosition() {
        int map[][] = this.map.getMap();
        for (int line = 0; line < MAX_DIMENSIONS; line++) {
            for (int column = 0; column < MAX_DIMENSIONS; column++) {
                if (map[line][column] == 6) {
                    this.goldPosition = new Coordinate(line, column);
                }
            }
        }
    }

    public void moveOgreUp(Ogre ogre) {
        ogre.editX(-1);
    }

    public void moveOgreDown(Ogre ogre) {
        ogre.editX(+1);
    }

    public void moveOgreRight(Ogre ogre) {
        ogre.editY(+1);
    }

    public void moveOgreLeft(Ogre ogre) {
        ogre.editY(-1);
    }

    public boolean findSolution() {
        Ogre tempOgre = new Ogre();
        for (int i = 0; i < OGRE_SIZE; i++) {
            Coordinate copy = new Coordinate(ogre.get_position(i).get_x(), ogre.get_position(i).get_y());
            tempOgre.setPositions(copy, i);
        }
        while (!touchingGold()) {
            boolean xPositive, yPositive, ogreIsStuck = false;
            if (tempOgre.get_position(3).get_x() < goldPosition.get_x()) {
                xPositive = true;
            } else {
                xPositive = false;
            }

            if (tempOgre.get_position(3).get_y() < goldPosition.get_y()) {
                yPositive = true;
            } else {
                yPositive = false;
            }
            while (!ogreIsStuck) {
                int failsafe = 0;
                if (xPositive == true) {
                    tempOgre.editX(1);
                    if (onSinkHole(tempOgre)) {
                        tempOgre.editX(-1);
                        failsafe++;
                    } else {
                        System.out.print("D");
                    }
                } else {
                    tempOgre.editX(-1);
                    if (onSinkHole(tempOgre)) {
                        tempOgre.editX(1);
                        failsafe++;
                    } else {
                        System.out.print("U");
                    }
                }
                if (yPositive == true) {
                    moveOgreLeft(tempOgre);
                    if (onSinkHole(tempOgre)) {
                        moveOgreRight(tempOgre);
                        failsafe++;
                    } else {
                        System.out.print("R");
                    }
                } else {
                    moveOgreRight(tempOgre);
                    if (onSinkHole(tempOgre)) {
                        moveOgreLeft(tempOgre);
                        failsafe++;
                    } else {
                        System.out.print("L");
                    }
                }

                if (failsafe > 0) {
                    ogreIsStuck = true;
                }
                hold();
            }
            ogreIsStuck = false;
            while (!ogreIsStuck) {
                int failsafe = 0;
                if (xPositive == false) {
                    moveOgreUp(tempOgre);
                    if (onSinkHole(tempOgre)) {
                        moveOgreDown(tempOgre);
                        failsafe++;
                    } else {
                        System.out.print("U");
                    }
                } else {
                    moveOgreDown(tempOgre);
                    if (onSinkHole(tempOgre)) {
                        moveOgreUp(tempOgre);
                        failsafe++;
                    } else {
                        System.out.print("D");
                    }
                }
                if (yPositive == false) {
                    moveOgreLeft(tempOgre);
                    if (onSinkHole(tempOgre)) {
                        moveOgreRight(tempOgre);
                        failsafe++;
                    } else {
                        System.out.print("L");
                    }
                } else {
                    moveOgreRight(tempOgre);
                    if (onSinkHole(tempOgre)) {
                        moveOgreLeft(tempOgre);
                        failsafe++;
                    } else {
                        System.out.print("R");
                    }
                }

                if (failsafe > 0) {
                    ogreIsStuck = true;
                }
                hold();
            }
        }
        return false;
    }

    public void hold() {
        try {
            Thread.sleep(1000);                 //1000 milliseconds is one second.
        } catch(InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }


    public boolean onSinkHole(Ogre ogre) {

        for (int i = 0; i < OGRE_SIZE; i++) {
            for (int x = 0; x < sinkholes.amountOfSinkholes(); x++) {
                if (ogre.get_position(i).get_x() == sinkholes.get_position(x).get_x() && ogre.get_position(i).get_y() == sinkholes.get_position(x).get_y()) {
                    return true;
                }
            }
            if (ogre.get_position(i).get_x() < 0 || ogre.get_position(i).get_x() > 9) {
                return true;
            }
            if (ogre.get_position(i).get_y() < 0 || ogre.get_position(i).get_y() > 9) {
                return true;
            }
        }
        return false;
    }

    public boolean touchingGold() {
        for (int i = 0; i < OGRE_SIZE; i++) {
            if (ogre.get_position(i).get_x() == goldPosition.get_x() && ogre.get_position(i).get_y() == goldPosition.get_y()) {
                return true;
            }
        }
        return false;
    }

    //Method to print the map...
    public void printMap() {
        int[][] printMap = map.getMap();
        System.out.println();
        for (int x = 0; x < MAX_DIMENSIONS; x++) {
            for (int y = 0; y < MAX_DIMENSIONS; y++) {
                System.out.printf("%d ", printMap[x][y]);
            }
            System.out.println();
        }
    }

    public boolean compare(Coordinate a, Coordinate b) {
        if (a.get_x() == b.get_x() && a.get_y() == b.get_y()) {
            return true;
        }
        return false;
    }
}
/*
COMPILATION - 10:49PM - 4/28/2015
"C:\Program Files (x86)\Java\jdk1.8.0_40\bin\java" -Didea.launcher.port=7550 "-Didea.launcher.bin.path=C:\Program Files (x86)\JetBrains\IntelliJ IDEA 14.0\bin" -Dfile.encoding=UTF-8 -classpath "C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\charsets.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\deploy.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\javaws.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\jce.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\jfr.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\jfxswt.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\jsse.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\management-agent.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\plugin.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\resources.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\rt.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\access-bridge-32.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\cldrdata.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\dnsns.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\jaccess.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\jfxrt.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\localedata.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\nashorn.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\sunec.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\sunjce_provider.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\sunmscapi.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\sunpkcs11.jar;C:\Program Files (x86)\Java\jdk1.8.0_40\jre\lib\ext\zipfs.jar;C:\Users\Chayton\IdeaProjects\OgreSwamp\out\production\OgreSwamp;C:\Program Files (x86)\JetBrains\IntelliJ IDEA 14.0\lib\idea_rt.jar" com.intellij.rt.execution.application.AppMain com.github.chaytonscott.OgreSwamp.OgreSwamp
Welcome to Ogre Swamp, please enter a map. (Type random to randomly generate a map)
@@........
@@O.......
.....O.O..
..........
..O.O.....
..O....O.O
.O........
..........
.....OO...
.........$
OGRE POSITIONS:	(0,0) (0,1) (1,0) (1,1)
SINKHOLE POSITIONS:	(1,2) (2,5) (2,7) (4,2) (4,4) (5,2) (5,7) (5,9) (6,1) (8,5) (8,6)
GOLD POSITION:	(9,9)

Integer Map for easier viewing...

9 9 0 0 0 0 0 0 0 0
9 9 3 0 0 0 0 0 0 0
0 0 0 0 0 3 0 3 0 0
0 0 0 0 0 0 0 0 0 0
0 0 3 0 3 0 0 0 0 0
0 0 3 0 0 0 0 3 0 3
0 3 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 3 3 0 0 0
0 0 0 0 0 0 0 0 0 6
DRDRDRDR
 */